<template>
  <div class="w-upload">
    <div
      id="thelist"
      class="uploader-list"
    ></div>
    <div id="picker">选择大文件</div>
    <div class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
    <ul
      class="el-upload-list el-upload-list--text"
      v-if="fileObj.status"
    >
      <li class="el-upload-list__item is-success">
        <a class="el-upload-list__item-name">
          <i class="el-icon-document"></i>
          {{fileObj.name}}
          <span v-if="fileObj.status!=='uploaded'" class="status">{{fileObj.status}}</span>
          <span v-else class="status success">上传成功</span>
        </a>
        <el-progress
          v-if="fileObj.status === 'uploading'|| fileObj.status=== 'checking'"
          :percentage="fileObj.percentage"
        >
        </el-progress>
      </li>
    </ul>
  </div>
</template>

<script>
import "../js/jquery";
import "../js/webupload/webuploader";
const $thelist = $("#thelist");
export default {
  name: "WUpload",
  data() {
    return {
      uploader: "",
      fileObj: {
        status: undefined,
        percentage: 0,
        name: ""
      }
    };
  },
  props: {
    chunkSize: {
      type: Number,
      default: 5 * 1024 * 1024
    }
  },
  mounted() {
    // HOOK 这个必须要再uploader实例化前面
    WebUploader.Uploader.register(
      {
        "before-send-file": "beforeSendFile",
        "before-send": "beforeSend"
      },
      {
        beforeSendFile: function(file) {
          console.log("beforeSendFile");
          // Deferred对象在钩子回掉函数中经常要用到，用来处理需要等待的异步操作。
          var deferred = WebUploader.Deferred();
          // 根据文件内容来查询MD5
          this.uploader
            .md5File(file)
            .progress(
              function(percentage) {
                // 及时显示进度
                console.log("计算md5进度:", percentage);
                this.fileObj.status = "checking";
                this.getProgressBar(file, parseInt(percentage * 100));
              }.bind(this)
            )
            .then(
              function(val) {
                // 完成
                console.log("md5 result:", val);
                this.fileObj.status = "checked";
                file.md5 = val;
                // 模拟用户id
                // file.uid = new Date().getTime() + "_" + Math.random() * 100;
                file.uid = WebUploader.Base.guid();
                // 进行md5判断
                $.post(
                  "http://192.168.17.82:9090/index/checkFileMd5",
                  { uid: file.uid, md5: file.md5 },
                  function(data) {
                    var status = data.status.value;
                    deferred.resolve();
                    if (status == 101) {
                      // 文件不存在，那就正常流程
                    } else if (status == 100) {
                      // 忽略上传过程，直接标识上传成功；
                      this.uploader.skipFile(file);
                      file.pass = true;
                    } else if (status == 102) {
                      // 部分已经上传到服务器了，但是差几个模块。
                      file.missChunks = data.data;
                    }
                  }.bind(this)
                );
              }.bind(this)
            );
          return deferred.promise();
        }.bind(this),
        beforeSend: function(block) {
          console.log("block");
          var deferred = WebUploader.Deferred();
          var file = block.file;
          var missChunks = file.missChunks;
          var blockChunk = block.chunk;
          console.log("当前分块：" + blockChunk);
          console.log("missChunks:" + missChunks);
          if (
            missChunks !== null &&
            missChunks !== undefined &&
            missChunks !== ""
          ) {
            var flag = true;
            for (var i = 0; i < missChunks.length; i++) {
              if (blockChunk == missChunks[i]) {
                console.log(
                  file.name + ":" + blockChunk + ":还没上传，现在上传去吧。"
                );
                flag = false;
                break;
              }
            }
            if (flag) {
              deferred.reject();
            } else {
              deferred.resolve();
            }
          } else {
            deferred.resolve();
          }
          return deferred.promise();
        }.bind(this)
      }
    );
    this.uploader = WebUploader.create({
      pick: {
        id: "#picker",
        label: "点击选择文件"
      },
      formData: {
        uid: 0,
        md5: "",
        chunkSize: this.chunkSize
      },
      //dnd: '#dndArea',
      //paste: '#uploader',
      swf: "../js/webupload/Uploader.swf",
      chunked: true,
      chunkSize: this.chunkSize, // 字节 1M分块
      threads: 3,
      // server: "http://192.168.17.82:9090/index/fileUpload",
      server: "index/fileUpload",
      auto: true,
      // 是否开启多选
      multiple: false,

      // 禁掉全局的拖拽功能。这样不会出现图片拖进页面的时候，把图片打开。
      disableGlobalDnd: true,
      fileNumLimit: 1,
      fileSizeLimit: 5 * 1024 * 1024 * 1024, // 200 M
      fileSingleSizeLimit: 5 * 1024 * 1024 * 1024 // 50 M
    });
    this.w_init();
  },
  methods: {
    w_init() {
      // 当有文件被添加进队列的时候
      this.uploader.on(
        "fileQueued",
        function(file) {
          console.log("fileQueued");
          // console.log(file)
          this.fileObj.name = file.name;
        }.bind(this)
      );

      //当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。
      this.uploader.onUploadBeforeSend = function(obj, data) {
        console.log("onUploadBeforeSend");
        var file = obj.file;
        data.md5 = file.md5 || "";
        data.uid = file.uid;
      };
      // 上传中
      this.uploader.on(
        "uploadProgress",
        function(file, percentage) {
          this.fileObj.status = "uploading";
          this.getProgressBar(
            file,
            parseInt(percentage * 100),
            "FILE",
            "上传进度"
          );
        }.bind(this)
      );
      // 上传返回结果
      this.uploader.on(
        "uploadSuccess",
        function(file) {
          this.fileObj.status = "uploaded";
          this.$message({
            type: "success",
            message: "上传成功...."
          });
        }.bind(this)
      );
      this.uploader.on(
        "uploadError",
        function(file) {
          this.$message({
            message: "上传失败....",
            type: "error"
          });
        }.bind(this)
      );
      this.uploader.on("uploadComplete", function(file) {
        // 隐藏进度条
        // fadeOutProgress(file, 'MD5');
        // fadeOutProgress(file, 'FILE');
      });
    },
    // 进度条效果
    getProgressBar(file, percentage) {
      this.fileObj.percentage = percentage;
    }
  }
};
</script>

<style  scoped>
@import url("../js/webupload/webuploader.css");
.status {
  display: inline-block;
  padding-left: 20px;
  color: #e6a23c;
}
.success{
  color: #67c23a;
}
.w-upload {
}
</style>